name: Create Release on Push to Main

on:
  push:
    branches: [ main ]
    paths:
      - 'backup-manager.sh'

permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Generate date-time based version
      id: get_version
      run: |
        # Generate UTC timestamp in YYYY.MM.DD.HHMM format
        VERSION=$(date -u '+%Y.%m.%d.%H%M')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated UTC date-time version: $VERSION"
        
        # Update VERSION in backup-manager.sh to match
        sed -i "s/^VERSION=\".*\"/VERSION=\"$VERSION\"/" backup-manager.sh
        echo "Updated backup-manager.sh with version: $VERSION"
    
    - name: Commit version update and create tag
      run: |
        # Configure git for automated commits
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Check if there are changes to commit
        if git diff --quiet backup-manager.sh; then
          echo "No version changes to commit"
          echo "tag_created=false" >> $GITHUB_ENV
        else
          # Commit the version update
          git add backup-manager.sh
          git commit -m "Update VERSION to ${{ steps.get_version.outputs.version }} [skip ci]"
          
          # Create and push tag
          git tag "v${{ steps.get_version.outputs.version }}"
          git push origin main
          git push origin "v${{ steps.get_version.outputs.version }}"
          
          echo "Committed version update and created tag v${{ steps.get_version.outputs.version }}"
          echo "tag_created=true" >> $GITHUB_ENV
        fi
    
    - name: Check if release exists
      id: check_release
      run: |
        if gh release view "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.get_version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.get_version.outputs.version }} does not exist"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Generate release notes
      id: release_notes
      if: steps.check_release.outputs.exists == 'false'
      run: |
        # Get the latest commit message for release notes
        COMMIT_MSG=$(git log -1 --pretty=format:"%B")
        
        # Create release notes with current UTC time
        RELEASE_TIME=$(date -u '+%Y-%m-%d %H:%M UTC')
        
        cat > release_notes.md << EOF
        ## Docker Stack Backup ${{ steps.get_version.outputs.version }}
        
        **Release Time**: $RELEASE_TIME
        
        ### ðŸš€ Quick Installation
        \`\`\`bash
        # Download and setup
        curl -fsSL https://raw.githubusercontent.com/zuptalo/docker-stack-backup/main/backup-manager.sh -o backup-manager.sh
        chmod +x backup-manager.sh
        ./backup-manager.sh setup
        \`\`\`
        
        ### ðŸ“‹ What's New
        $COMMIT_MSG
        
        ### ðŸ’» Available Commands
        - \`./backup-manager.sh setup\` - Initial setup and deployment
        - \`./backup-manager.sh backup\` - Create comprehensive backup
        - \`./backup-manager.sh restore\` - Interactive restore from backup
        - \`./backup-manager.sh schedule\` - Setup automated backup scheduling
        - \`./backup-manager.sh update\` - Update to latest version
        - \`./backup-manager.sh config\` - Reconfigure paths and settings
        - \`./backup-manager.sh generate-nas-script\` - Create NAS backup client
        
        ### âœ¨ Features
        - Single-script Docker environment setup
        - Production-ready with SSL certificates
        - Comprehensive backup with 31 automated tests
        - Remote backup synchronization
        - Self-updating from GitHub releases
        
        ### ðŸ“‹ Requirements
        - Ubuntu LTS (24.04 recommended)
        - User with sudo privileges (NOT root)
        - Ports 80 and 443 available
        - Internet connectivity
        
        ---
        
        **Version Format**: UTC timestamp (\`YYYY.MM.DD.HHMM\`) for precise release tracking
        **Full Changelog**: https://github.com/zuptalo/docker-stack-backup/commits/v${{ steps.get_version.outputs.version }}
        EOF
        
        echo "Generated release notes for v${{ steps.get_version.outputs.version }}"
    
    - name: Create Release
      if: steps.check_release.outputs.exists == 'false' && env.tag_created == 'true'
      run: |
        # Wait a moment for tag to be available on remote
        sleep 3
        
        # Verify tag exists
        if git ls-remote --tags origin | grep -q "v${{ steps.get_version.outputs.version }}"; then
          echo "Tag v${{ steps.get_version.outputs.version }} confirmed on remote"
          
          # Create release from the tag
          gh release create "v${{ steps.get_version.outputs.version }}" \
            --title "Docker Stack Backup ${{ steps.get_version.outputs.version }}" \
            --notes-file release_notes.md \
            --latest \
            backup-manager.sh
        else
          echo "Tag v${{ steps.get_version.outputs.version }} not found on remote, skipping release creation"
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Release Summary
      run: |
        if [ "${{ steps.check_release.outputs.exists }}" == "true" ]; then
          echo "âœ… Release v${{ steps.get_version.outputs.version }} already exists - no action needed"
        else
          echo "ðŸš€ Created new release: v${{ steps.get_version.outputs.version }}"
          echo "ðŸ“¦ Release URL: https://github.com/zuptalo/docker-stack-backup/releases/tag/v${{ steps.get_version.outputs.version }}"
        fi